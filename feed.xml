<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://boychaboy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://boychaboy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-03T08:25:46+00:00</updated><id>https://boychaboy.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">bash-cheatsheet</title><link href="https://boychaboy.github.io/posts/2023/06/09/bash.html" rel="alternate" type="text/html" title="bash-cheatsheet"/><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https://boychaboy.github.io/posts/2023/06/09/bash</id><content type="html" xml:base="https://boychaboy.github.io/posts/2023/06/09/bash.html"><![CDATA[<h3 id="if-else">IF-ELSE</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/file"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"no file exits!"</span>
<span class="k">fi</span>
</code></pre></div></div> <ul> <li>특정 디렉토리에 폴더/파일이 존재하는지 확인</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> <span class="nv">$var</span> <span class="o">==</span> <span class="s1">'str'</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"string matches!"</span>
<span class="k">fi</span>
</code></pre></div></div> <ul> <li>변수와 문자열을 비교</li> </ul> <h3 id="print">PRINT</h3> <p><code class="language-plaintext highlighter-rouge">printf "\033[33mChecking Start...\033[0m\n"</code></p> <ul> <li>노란색으로 출력</li> </ul> <p><code class="language-plaintext highlighter-rouge">printf</code> vs <code class="language-plaintext highlighter-rouge">echo</code></p> <ul> <li>echo는 default로 newline을 보내고, printf는 보내지 않는다.</li> <li>formatting 등등의 옵션이 printf에 더 많다.</li> <li><a href="https://pavolkutaj.medium.com/output-echo-and-printf-3eaa2fadd445">reference</a></li> </ul> <h3 id="check-os-type">check os type</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$OSTYPE</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"linux-gnu"</span><span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="c"># linux</span>
<span class="k">elif</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$OSTYPE</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"darwin"</span><span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="c"># Mac OSX</span>
<span class="k">else</span>
        <span class="c"># Unknown.</span>
<span class="k">fi</span>
</code></pre></div></div> <h3 id="run-another-script-in-current-script">run another script in current script</h3> <p><code class="language-plaintext highlighter-rouge">sh another_scipt.sh</code></p> <h3 id="choice">choice</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"Proceed (y/n [n])? "</span> choice
<span class="k">case</span> <span class="s2">"</span><span class="nv">$choice</span><span class="s2">"</span> <span class="k">in
    </span>y|Y <span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"Yes"</span>
        <span class="p">;;</span>
    n|N|<span class="s2">""</span> <span class="p">)</span>
        <span class="nb">echo</span> <span class="s2">"No"</span>
    <span class="k">esac</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="posts"/><category term="code"/><category term="linux"/><summary type="html"><![CDATA[bash, shell script]]></summary></entry><entry><title type="html">docker-cheatsheet</title><link href="https://boychaboy.github.io/posts/2023/06/09/docker.html" rel="alternate" type="text/html" title="docker-cheatsheet"/><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https://boychaboy.github.io/posts/2023/06/09/docker</id><content type="html" xml:base="https://boychaboy.github.io/posts/2023/06/09/docker.html"><![CDATA[<h2 id="docker-container-commands"><code class="language-plaintext highlighter-rouge">docker container</code> commands</h2> <blockquote> <p>컨테이너를 실행하거나 종료하고, 컨테이너 목록을 확인하는 등 컨테이너를 다루기 위해 사용하는 커맨드</p> </blockquote> <p><code class="language-plaintext highlighter-rouge">docker (container) start</code></p> <ul> <li>컨테이너를 실행</li> <li>옵션 <ul> <li><code class="language-plaintext highlighter-rouge">-i</code>:</li> </ul> </li> </ul> <p><code class="language-plaintext highlighter-rouge">docker (container) stop</code></p> <ul> <li>컨테이너를 정지</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker (container) create</code></p> <ul> <li>도커 이미지로부터 컨테이너를 생성</li> <li><code class="language-plaintext highlighter-rouge">--name</code>:</li> <li>옵션 <ul> <li><code class="language-plaintext highlighter-rouge">--name</code>:</li> <li><code class="language-plaintext highlighter-rouge">-e</code></li> <li><code class="language-plaintext highlighter-rouge">-p</code></li> <li><code class="language-plaintext highlighter-rouge">-v</code></li> </ul> </li> </ul> <p>✨ <code class="language-plaintext highlighter-rouge">docker (container) run</code></p> <ul> <li>도커 이미지를 내려받고 컨테이너를 생성해 실행</li> <li><code class="language-plaintext highlighter-rouge">docker image pull</code> + <code class="language-plaintext highlighter-rouge">docker container create</code> + <code class="language-plaintext highlighter-rouge">docker container start</code> 과 동일</li> <li>가장 일반적으로 사용하는 명령어</li> <li>옵션 <ul> <li><code class="language-plaintext highlighter-rouge">--name</code>:</li> <li><code class="language-plaintext highlighter-rouge">-e</code></li> <li><code class="language-plaintext highlighter-rouge">-p</code></li> <li><code class="language-plaintext highlighter-rouge">-v</code></li> <li><code class="language-plaintext highlighter-rouge">-d</code></li> <li><code class="language-plaintext highlighter-rouge">-i</code></li> <li><code class="language-plaintext highlighter-rouge">-t</code></li> </ul> </li> </ul> <p><code class="language-plaintext highlighter-rouge">docker (container) rm</code></p> <ul> <li>정지 상태의 컨테이너를 삭제</li> <li>옵션 <ul> <li><code class="language-plaintext highlighter-rouge">-f</code></li> <li><code class="language-plaintext highlighter-rouge">-v</code></li> </ul> </li> </ul> <p><code class="language-plaintext highlighter-rouge">docker (container) exec</code></p> <ul> <li>실행중인 컨테이너 속에서 프로그램을 실행</li> <li>옵션 <ul> <li><code class="language-plaintext highlighter-rouge">-i</code></li> <li><code class="language-plaintext highlighter-rouge">-t</code></li> </ul> </li> </ul> <p><code class="language-plaintext highlighter-rouge">docker container ls</code> | <code class="language-plaintext highlighter-rouge">docker ps</code></p> <ul> <li>컨테이너 목록을 출력</li> <li> <ul> <li>옵션</li> <li><code class="language-plaintext highlighter-rouge">-a</code></li> </ul> </li> </ul> <p><code class="language-plaintext highlighter-rouge">docker (container) commit</code></p> <ul> <li>도커 컨테이너를 이미지로 변환</li> </ul> <h2 id="docker-image-commands"><code class="language-plaintext highlighter-rouge">docker image</code> commands</h2> <blockquote> <p>이미지를 내려받거나 검색하는 등 이미지와 관련된 기능을 실행하는 커맨드</p> </blockquote> <p><code class="language-plaintext highlighter-rouge">docker (image) pull</code></p> <ul> <li>도커 허브 등의 리포지토리에서 이미지를 내려받음</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker image rm</code> | <code class="language-plaintext highlighter-rouge">docker rmi</code></p> <ul> <li>도커 이미지를 삭제</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker image ls</code></p> <ul> <li>내려 받은 이미지의 목록을 출력</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker (image) build</code></p> <ul> <li>도커 이미지를 생성</li> </ul> <h2 id="docker-solo-commands"><code class="language-plaintext highlighter-rouge">docker solo commands</code></h2> <p><code class="language-plaintext highlighter-rouge">docker login</code></p> <ul> <li>도커 레지스트리에 로그인</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker logout</code></p> <ul> <li>도커 레지스트르에 로그아웃</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker search</code></p> <ul> <li>도커 레지스트리를 검색</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker version</code></p> <ul> <li>도커 엔진 및 명령행 도구의 버전을 출력</li> </ul> <h2 id="docker-network-commands"><code class="language-plaintext highlighter-rouge">docker network</code> commands</h2> <p><code class="language-plaintext highlighter-rouge">docker network connect</code></p> <ul> <li>네트워크에 컨테이너를 새로이 접속 <code class="language-plaintext highlighter-rouge">docker network disconnect</code></li> <li>네트워크에서 컨테이너의 접속을 끊음 <code class="language-plaintext highlighter-rouge">docker network create</code></li> <li>네트워크를 생성 <code class="language-plaintext highlighter-rouge">docker network inspect</code></li> <li>네트워크의 상세정보를 확인 <code class="language-plaintext highlighter-rouge">docker network ls</code></li> <li>네트워크 목록을 확인 <code class="language-plaintext highlighter-rouge">docker network prune</code></li> <li>현재 아무 컨테이너도 접속하지 않은 네트워크를 모두 삭제 <code class="language-plaintext highlighter-rouge">docker network rm</code></li> <li>지정한 네트워크를 삭제</li> </ul> <h2 id="examples">Examples</h2> <p>MySQL 컨테이너 실행 예시</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--name</span> <span class="o">{</span>컨테이너 이름<span class="o">}</span> <span class="nt">-dit</span> <span class="nt">--net</span><span class="o">={</span>네트워크 이름<span class="o">}</span> <span class="nt">-e</span> <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>myrootpass <span class="nt">-e</span> <span class="nv">MYSQL_DATABASE</span><span class="o">=</span>wordpress000db <span class="nt">-e</span> <span class="nv">MYSQL_USER</span><span class="o">=</span>wordpress000kun <span class="nt">-e</span> <span class="nv">MYSQL_PASSWORD</span><span class="o">=</span>wkunpass mysql <span class="nt">--character-set-server</span><span class="o">={</span>문자 인코딩<span class="o">}</span> <span class="nt">--collation-server</span><span class="o">={</span>정렬 순서<span class="o">}</span> <span class="nt">--default-authentication-plugin</span><span class="o">=</span>mysql_native_password
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">docker cp {host_dir} {container_name}:{file_name}</code></p> <ul> <li>호스트에서 컨테이너로 파일 복사</li> </ul> <p><code class="language-plaintext highlighter-rouge">docker cp {container_name}:{file_name} {host_dir}</code></p> <ul> <li>컨테이너에서 호스트로 파일 복사</li> </ul> <p>볼륨 마운트</p> <ul> <li>도커 엔진이 관리하는 영역 내에 만들어진 볼륨을 컨테이너에 디스크 형태로 마운트</li> <li>자주 쓰지는 않지만 지우면 안되는 파일을 두는 목적으로 사용</li> </ul> <p>바인드 마운트</p> <ul> <li>도커 엔진에서 관리하지 않는 영역의 기존 디렉터리를 컨테이너에 마운트</li> <li>자주 쓰는 파일을 두는 목적으로 사용</li> </ul>]]></content><author><name></name></author><category term="posts"/><category term="code"/><category term="docker"/><summary type="html"><![CDATA[everything I know about docker]]></summary></entry><entry><title type="html">git-cheatsheet</title><link href="https://boychaboy.github.io/posts/2023/06/09/git.html" rel="alternate" type="text/html" title="git-cheatsheet"/><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https://boychaboy.github.io/posts/2023/06/09/git</id><content type="html" xml:base="https://boychaboy.github.io/posts/2023/06/09/git.html"><![CDATA[<h1 id="references">References</h1> <blockquote> <p>좋은 참고 자료들</p> <h3 id="웹-문서">웹 문서</h3> <ul> <li><a href="https://tecoble.techcourse.co.kr/post/2021-07-14-vim-attitude/">vim을 대하는 자세</a></li> <li><a href="https://soooprmx.com/category/tools/vi-vim-in-linux/">Wireframe 블로그</a></li> <li><a href="https://opentutorials.org/course/730">opentutorials.org</a></li> </ul> </blockquote> <h3 id="책">책</h3> <ul> <li><a href="https://www.amazon.com/Learning-Vim-Editors-Processing-Maximum-ebook/dp/B005EI85BE," title="vim 에서는 제일 유명한 책이라고 한다">Learning the vi and Vim Editors: Text Processing at Maximum Speed and Power</a></li> </ul> <h3 id="게임">게임</h3> <ul> <li>https://vim-adventures.com</li> </ul> <h3 id="이미지">이미지</h3> <p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FUmamn%2Fbtqu0U4URc9%2Fzpljikk1K4wrwWHXUFCwG0%2Fimg.png" alt=""/></p> <h1 id="basic">Basic</h1> <blockquote> <p>기본적인 vim 사용법. 외웠거나 손에 익은 명령어는 지움</p> <ol> <li>입력 모드 들어가기 <br/> <code class="language-plaintext highlighter-rouge">i</code> : 커서 앞<br/> <code class="language-plaintext highlighter-rouge">I</code> : 라인 맨 앞<br/> <code class="language-plaintext highlighter-rouge">o</code> : 다음 라인<br/> <code class="language-plaintext highlighter-rouge">O</code> : 이전 라인<br/> <code class="language-plaintext highlighter-rouge">a</code> : 커서 뒤<br/> <code class="language-plaintext highlighter-rouge">A</code> : 라인 맨 뒤<br/> <code class="language-plaintext highlighter-rouge">s</code> : 커서가 가리키는 문자 지우고 새로 쓰기 💫</li> </ol> </blockquote> <ol> <li>편집 <ul> <li><code class="language-plaintext highlighter-rouge">vi(</code>: 괄호 안에 있는 텍스트를 선택</li> <li><code class="language-plaintext highlighter-rouge">di(</code>: 괄호 안에 있는 텍스트를 삭제</li> <li><code class="language-plaintext highlighter-rouge">da(</code>: 괄호를 포함해서 텍스트를 삭제</li> <li><code class="language-plaintext highlighter-rouge">c()&lt;ESC&gt;P</code>: 선택된 영역을 괄호로 감싸기</li> </ul> </li> <li>커서 이동 <ul> <li><code class="language-plaintext highlighter-rouge">'a'를 찾아라</code> =&gt; <code class="language-plaintext highlighter-rouge">find 'a'</code> =&gt; <code class="language-plaintext highlighter-rouge">fa</code></li> <li><code class="language-plaintext highlighter-rouge">3번째 등장하는 'a'를 찾아라</code> =&gt; <code class="language-plaintext highlighter-rouge">find 3rd 'a'</code> = <code class="language-plaintext highlighter-rouge">f3a</code></li> <li><code class="language-plaintext highlighter-rouge">'('전으로 이동하라</code> =&gt; <code class="language-plaintext highlighter-rouge">till '('</code> =&gt; <code class="language-plaintext highlighter-rouge">t(</code></li> </ul> </li> <li>저장 및 종료 <ul> <li><code class="language-plaintext highlighter-rouge">:e</code>: 현재 파일을 불러옴</li> <li><code class="language-plaintext highlighter-rouge">:e#</code>: 바로 이전에 열었던 파일을 불러 옴</li> <li><code class="language-plaintext highlighter-rouge">ZZ</code>: 저장 후 종료</li> </ul> </li> <li>Yank Register <ul> <li><code class="language-plaintext highlighter-rouge">:reg</code>: 레지스터 확인</li> <li><code class="language-plaintext highlighter-rouge">:"0p</code>: 0번째 레지스터 값 붙여넣기</li> </ul> </li> </ol> <h1 id="setting">Setting</h1> <h3 id="insert-mode에서-영어만-입력되게-하기">insert mode에서 영어만 입력되게 하기</h3> <p><a href="https://hannut91.github.io/blogs/vim/korean">블로그 참고</a></p> <ul> <li>나는 이상하게 이렇게 설치해도 잘 안됨.</li> <li>이미 한,영키를 자주 오가는게 손에 익었으므로 패스</li> <li>심지어 한 영키도 초기의 맥(한/영키가 따로 없었던…)에 이미 몸이 적응해버려서 Ctrl + Space로 참으로 번거롭게도 사용하고 있음</li> </ul>]]></content><author><name></name></author><category term="posts"/><category term="code"/><category term="linux"/><summary type="html"><![CDATA[commonly used git commands]]></summary></entry><entry><title type="html">python-cheatsheet</title><link href="https://boychaboy.github.io/posts/2023/06/09/python.html" rel="alternate" type="text/html" title="python-cheatsheet"/><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https://boychaboy.github.io/posts/2023/06/09/python</id><content type="html" xml:base="https://boychaboy.github.io/posts/2023/06/09/python.html"><![CDATA[<h3 id="python-error-types-and-explanations">Python Error Types and Explanations</h3> <table> <thead> <tr> <th>Exception</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>AssertionError</td> <td>Raised when the assert statement fails.</td> </tr> <tr> <td>AttributeError</td> <td>Raised on the attribute assignment or reference fails.</td> </tr> <tr> <td>EOFError</td> <td>Raised when the input() function hits the end-of-file condition.</td> </tr> <tr> <td>FloatingPointError</td> <td>Raised when a floating point operation fails.</td> </tr> <tr> <td>GeneratorExit</td> <td>Raised when a generator’s close() method is called.</td> </tr> <tr> <td>ImportError</td> <td>Raised when the imported module is not found.</td> </tr> <tr> <td>IndexError</td> <td>Raised when the index of a sequence is out of range.</td> </tr> <tr> <td>KeyError</td> <td>Raised when a key is not found in a dictionary.</td> </tr> <tr> <td>KeyboardInterrupt</td> <td>Raised when the user hits the interrupt key (Ctrl+c or delete).</td> </tr> <tr> <td>MemoryError</td> <td>Raised when an operation runs out of memory.</td> </tr> <tr> <td>NameError</td> <td>Raised when a variable is not found in the local or global scope.</td> </tr> <tr> <td>NotImplementedError</td> <td>Raised by abstract methods.</td> </tr> <tr> <td>OSError</td> <td>Raised when a system operation causes a system-related error.</td> </tr> <tr> <td>OverflowError</td> <td>Raised when the result of an arithmetic operation is too large to be represented.</td> </tr> <tr> <td>ReferenceError</td> <td>Raised when a weak reference proxy is used to access a garbage collected referent.</td> </tr> <tr> <td>RuntimeError</td> <td>Raised when an error does not fall under any other category.</td> </tr> <tr> <td>StopIteration</td> <td>Raised by the next() function to indicate that there is no further item to be returned by the iterator.</td> </tr> <tr> <td>SyntaxError</td> <td>Raised by the parser when a syntax error is encountered.</td> </tr> <tr> <td>IndentationError</td> <td>Raised when there is an incorrect indentation.</td> </tr> <tr> <td>TabError</td> <td>Raised when the indentation consists of inconsistent tabs and spaces.</td> </tr> <tr> <td>SystemError</td> <td>Raised when the interpreter detects internal error.</td> </tr> <tr> <td>SystemExit</td> <td>Raised by the sys.exit() function.</td> </tr> <tr> <td>TypeError</td> <td>Raised when a function or operation is applied to an object of an incorrect type.</td> </tr> <tr> <td>UnboundLocalError</td> <td>Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.</td> </tr> <tr> <td>UnicodeError</td> <td>Raised when a Unicode-related encoding or decoding error occurs.</td> </tr> <tr> <td>UnicodeEncodeError</td> <td>Raised when a Unicode-related error occurs during encoding.</td> </tr> <tr> <td>UnicodeDecodeError</td> <td>Raised when a Unicode-related error occurs during decoding.</td> </tr> <tr> <td>UnicodeTranslateError</td> <td>Raised when a Unicode-related error occurs during translation.</td> </tr> <tr> <td>ValueError</td> <td>Raised when a function gets an argument of correct type but improper value.</td> </tr> <tr> <td>ZeroDivisionError</td> <td>Raised when the second operand of a division or module operation is zero.</td> </tr> </tbody> </table> <h3 id="python-docstring-example">Python Docstring Example</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">string_reverse</span><span class="p">(</span><span class="n">str1</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Returns the reversed String.

    Args:
        str1 (str): The string which is to be reversed.

    Returns:
        reverse (str): The string which gets reversed.

    Todo:
        * eat breakfast
    </span><span class="sh">"""</span>

    <span class="n">reverse_str1</span> <span class="o">=</span> <span class="sh">''</span>
    <span class="n">i</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">str1</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">reverse_str1</span> <span class="o">+=</span> <span class="n">str1</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">reverse_str1</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="posts"/><category term="code"/><category term="python"/><summary type="html"><![CDATA[thing's I often forget about python]]></summary></entry><entry><title type="html">vim-cheatsheet</title><link href="https://boychaboy.github.io/posts/2023/06/09/vim.html" rel="alternate" type="text/html" title="vim-cheatsheet"/><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https://boychaboy.github.io/posts/2023/06/09/vim</id><content type="html" xml:base="https://boychaboy.github.io/posts/2023/06/09/vim.html"><![CDATA[<h1 id="references">References</h1> <blockquote> <p>좋은 참고 자료들</p> <h3 id="웹-문서">웹 문서</h3> <ul> <li><a href="https://tecoble.techcourse.co.kr/post/2021-07-14-vim-attitude/">vim을 대하는 자세</a></li> <li><a href="https://soooprmx.com/category/tools/vi-vim-in-linux/">Wireframe 블로그</a></li> <li><a href="https://opentutorials.org/course/730">opentutorials.org</a></li> </ul> </blockquote> <h3 id="책">책</h3> <ul> <li><a href="https://www.amazon.com/Learning-Vim-Editors-Processing-Maximum-ebook/dp/B005EI85BE," title="vim 에서는 제일 유명한 책이라고 한다">Learning the vi and Vim Editors: Text Processing at Maximum Speed and Power</a></li> </ul> <h3 id="게임">게임</h3> <ul> <li>https://vim-adventures.com</li> </ul> <h3 id="이미지">이미지</h3> <p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FUmamn%2Fbtqu0U4URc9%2Fzpljikk1K4wrwWHXUFCwG0%2Fimg.png" alt=""/></p> <h1 id="basic">Basic</h1> <blockquote> <p>기본적인 vim 사용법. 외웠거나 손에 익은 명령어는 지움</p> <ol> <li>입력 모드 들어가기 <br/> <code class="language-plaintext highlighter-rouge">i</code> : 커서 앞<br/> <code class="language-plaintext highlighter-rouge">I</code> : 라인 맨 앞<br/> <code class="language-plaintext highlighter-rouge">o</code> : 다음 라인<br/> <code class="language-plaintext highlighter-rouge">O</code> : 이전 라인<br/> <code class="language-plaintext highlighter-rouge">a</code> : 커서 뒤<br/> <code class="language-plaintext highlighter-rouge">A</code> : 라인 맨 뒤<br/> <code class="language-plaintext highlighter-rouge">s</code> : 커서가 가리키는 문자 지우고 새로 쓰기 💫</li> </ol> </blockquote> <ol> <li>편집 <ul> <li><code class="language-plaintext highlighter-rouge">vi(</code>: 괄호 안에 있는 텍스트를 선택</li> <li><code class="language-plaintext highlighter-rouge">di(</code>: 괄호 안에 있는 텍스트를 삭제</li> <li><code class="language-plaintext highlighter-rouge">da(</code>: 괄호를 포함해서 텍스트를 삭제</li> <li><code class="language-plaintext highlighter-rouge">c()&lt;ESC&gt;P</code>: 선택된 영역을 괄호로 감싸기</li> </ul> </li> <li>커서 이동 <ul> <li><code class="language-plaintext highlighter-rouge">'a'를 찾아라</code> =&gt; <code class="language-plaintext highlighter-rouge">find 'a'</code> =&gt; <code class="language-plaintext highlighter-rouge">fa</code></li> <li><code class="language-plaintext highlighter-rouge">3번째 등장하는 'a'를 찾아라</code> =&gt; <code class="language-plaintext highlighter-rouge">find 3rd 'a'</code> = <code class="language-plaintext highlighter-rouge">f3a</code></li> <li><code class="language-plaintext highlighter-rouge">'('전으로 이동하라</code> =&gt; <code class="language-plaintext highlighter-rouge">till '('</code> =&gt; <code class="language-plaintext highlighter-rouge">t(</code></li> </ul> </li> <li>저장 및 종료 <ul> <li><code class="language-plaintext highlighter-rouge">:e</code>: 현재 파일을 불러옴</li> <li><code class="language-plaintext highlighter-rouge">:e#</code>: 바로 이전에 열었던 파일을 불러 옴</li> <li><code class="language-plaintext highlighter-rouge">ZZ</code>: 저장 후 종료</li> </ul> </li> <li>Yank Register <ul> <li><code class="language-plaintext highlighter-rouge">:reg</code>: 레지스터 확인</li> <li><code class="language-plaintext highlighter-rouge">:"0p</code>: 0번째 레지스터 값 붙여넣기</li> </ul> </li> </ol> <h1 id="setting">Setting</h1> <h3 id="insert-mode에서-영어만-입력되게-하기">insert mode에서 영어만 입력되게 하기</h3> <p><a href="https://hannut91.github.io/blogs/vim/korean">블로그 참고</a></p> <ul> <li>나는 이상하게 이렇게 설치해도 잘 안됨.</li> <li>이미 한,영키를 자주 오가는게 손에 익었으므로 패스</li> <li>심지어 한 영키도 초기의 맥(한/영키가 따로 없었던…)에 이미 몸이 적응해버려서 Ctrl + Space로 참으로 번거롭게도 사용하고 있음</li> </ul>]]></content><author><name></name></author><category term="posts"/><category term="code"/><category term="linux"/><summary type="html"><![CDATA[everything I know about vim]]></summary></entry><entry><title type="html">a post with redirect</title><link href="https://boychaboy.github.io/2022/02/01/redirect.html" rel="alternate" type="text/html" title="a post with redirect"/><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>https://boychaboy.github.io/2022/02/01/redirect</id><content type="html" xml:base="https://boychaboy.github.io/2022/02/01/redirect.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry><entry><title type="html">a post with diagrams</title><link href="https://boychaboy.github.io/2021/07/04/diagrams.html" rel="alternate" type="text/html" title="a post with diagrams"/><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://boychaboy.github.io/2021/07/04/diagrams</id><content type="html" xml:base="https://boychaboy.github.io/2021/07/04/diagrams.html"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <h2 id="mermaid">Mermaid</h2> <p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1698999952219" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1698999952219 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1698999952219 .node circle,#mermaid-1698999952219 .node ellipse,#mermaid-1698999952219 .node polygon,#mermaid-1698999952219 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1698999952219 .node.clickable{cursor:pointer}#mermaid-1698999952219 .arrowheadPath{fill:#333}#mermaid-1698999952219 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1698999952219 .edgeLabel{background-color:#e8e8e8}#mermaid-1698999952219 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1698999952219 .cluster text{fill:#333}#mermaid-1698999952219 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1698999952219 .actor{stroke:#ccf;fill:#ececff}#mermaid-1698999952219 text.actor{fill:#000;stroke:none}#mermaid-1698999952219 .actor-line{stroke:grey}#mermaid-1698999952219 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1698999952219 .messageLine0,#mermaid-1698999952219 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1698999952219 #arrowhead{fill:#333}#mermaid-1698999952219 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1698999952219 .messageText{fill:#333;stroke:none}#mermaid-1698999952219 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1698999952219 .labelText,#mermaid-1698999952219 .loopText{fill:#000;stroke:none}#mermaid-1698999952219 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1698999952219 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1698999952219 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1698999952219 .section{stroke:none;opacity:.2}#mermaid-1698999952219 .section0{fill:rgba(102,102,255,.49)}#mermaid-1698999952219 .section2{fill:#fff400}#mermaid-1698999952219 .section1,#mermaid-1698999952219 .section3{fill:#fff;opacity:.2}#mermaid-1698999952219 .sectionTitle0,#mermaid-1698999952219 .sectionTitle1,#mermaid-1698999952219 .sectionTitle2,#mermaid-1698999952219 .sectionTitle3{fill:#333}#mermaid-1698999952219 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1698999952219 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1698999952219 .grid path{stroke-width:0}#mermaid-1698999952219 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1698999952219 .task{stroke-width:2}#mermaid-1698999952219 .taskText{text-anchor:middle;font-size:11px}#mermaid-1698999952219 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1698999952219 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1698999952219 .taskText0,#mermaid-1698999952219 .taskText1,#mermaid-1698999952219 .taskText2,#mermaid-1698999952219 .taskText3{fill:#fff}#mermaid-1698999952219 .task0,#mermaid-1698999952219 .task1,#mermaid-1698999952219 .task2,#mermaid-1698999952219 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1698999952219 .taskTextOutside0,#mermaid-1698999952219 .taskTextOutside1,#mermaid-1698999952219 .taskTextOutside2,#mermaid-1698999952219 .taskTextOutside3{fill:#000}#mermaid-1698999952219 .active0,#mermaid-1698999952219 .active1,#mermaid-1698999952219 .active2,#mermaid-1698999952219 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1698999952219 .activeText0,#mermaid-1698999952219 .activeText1,#mermaid-1698999952219 .activeText2,#mermaid-1698999952219 .activeText3{fill:#000!important}#mermaid-1698999952219 .done0,#mermaid-1698999952219 .done1,#mermaid-1698999952219 .done2,#mermaid-1698999952219 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1698999952219 .doneText0,#mermaid-1698999952219 .doneText1,#mermaid-1698999952219 .doneText2,#mermaid-1698999952219 .doneText3{fill:#000!important}#mermaid-1698999952219 .crit0,#mermaid-1698999952219 .crit1,#mermaid-1698999952219 .crit2,#mermaid-1698999952219 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1698999952219 .activeCrit0,#mermaid-1698999952219 .activeCrit1,#mermaid-1698999952219 .activeCrit2,#mermaid-1698999952219 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1698999952219 .doneCrit0,#mermaid-1698999952219 .doneCrit1,#mermaid-1698999952219 .doneCrit2,#mermaid-1698999952219 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1698999952219 .activeCritText0,#mermaid-1698999952219 .activeCritText1,#mermaid-1698999952219 .activeCritText2,#mermaid-1698999952219 .activeCritText3,#mermaid-1698999952219 .doneCritText0,#mermaid-1698999952219 .doneCritText1,#mermaid-1698999952219 .doneCritText2,#mermaid-1698999952219 .doneCritText3{fill:#000!important}#mermaid-1698999952219 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1698999952219 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1698999952219 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1698999952219 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1698999952219 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1698999952219 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1698999952219 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1698999952219 #compositionEnd,#mermaid-1698999952219 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1698999952219 #aggregationEnd,#mermaid-1698999952219 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1698999952219 #dependencyEnd,#mermaid-1698999952219 #dependencyStart,#mermaid-1698999952219 #extensionEnd,#mermaid-1698999952219 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1698999952219 .branch-label,#mermaid-1698999952219 .commit-id,#mermaid-1698999952219 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1698999952219{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div>]]></content><author><name></name></author><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://boychaboy.github.io/2021/05/22/distill.html" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://boychaboy.github.io/2021/05/22/distill</id><content type="html" xml:base="https://boychaboy.github.io/2021/05/22/distill.html"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="https://boychaboy.github.io/sample-posts/external-services/2020/09/28/github-metadata.html" rel="alternate" type="text/html" title="a post with github metadata"/><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>https://boychaboy.github.io/sample-posts/external-services/2020/09/28/github-metadata</id><content type="html" xml:base="https://boychaboy.github.io/sample-posts/external-services/2020/09/28/github-metadata.html"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p> <h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2> <ul> <li>Propagates the site.github namespace with repository metadata</li> <li>Setting site variables : <ul> <li>site.title</li> <li>site.description</li> <li>site.url</li> <li>site.baseurl</li> </ul> </li> <li>Accessing the metadata - duh.</li> <li>Generating edittable links.</li> </ul> <h2 id="additional-reading">Additional Reading</h2> <ul> <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li> <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li> <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata. <br/></li> </ul> <h2 id="example-metadata">Example MetaData</h2> <ul> <li>Host Name :</li> <li>URL :</li> <li>BaseURL :</li> <li>Archived :</li> <li>Contributors :</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://boychaboy.github.io/sample-posts/external-services/2020/09/28/twitter.html" rel="alternate" type="text/html" title="a post with twitter"/><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>https://boychaboy.github.io/sample-posts/external-services/2020/09/28/twitter</id><content type="html" xml:base="https://boychaboy.github.io/sample-posts/external-services/2020/09/28/twitter.html"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p> <h1 id="tweet">Tweet</h1> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="timeline">Timeline</h1> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="additional-details">Additional Details</h1> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><category term="formatting"/><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry></feed>